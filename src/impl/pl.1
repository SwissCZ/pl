.Dd April 15, 2014
.Dt PL 1
.Os
.Sh NAME
.Nm pl
.Nd handle formulas of propositional logic
.Sh SYNOPSIS
.Nm
.Op Fl A | D | P
.Op Fl e
.Op Fl f Ar file
.Op Fl i Ar syntax
.Op Fl l Ar language
.Op Fl o Ar syntax
.Op Fl s
.Sh DESCRIPTION
The
.Nm
utility implements the rudimentary algorithms of propositional logic. By default, it parses the standard input as propositional formulas, reports syntax errors, and exits. Other actions, as proof or axiom validation, can be specified using the options.
.Ss Language
The latin capitals A—Z are considered atomic propositions. This means we are reducing the possible complexity of formulas to 26 propositional variables, which is enough for our purposes.
.Pp
The following table describes how the propositional connectives are expressed in ASCII, words, and TeX output.
.Pp
.Bl -column "Connective" "ASCII" "words" "TeX" -compact
.It Em "Connective	ASCII	words	TeX"
.It Li negation Ta - Ta not Ta neg
.It Li conjunction Ta . Ta and Ta wedge
.It Li disjunction Ta + Ta or Ta vee
.It Li implication Ta > Ta implies Ta rightarrow
.It Li equivalence Ta = Ta iff Ta leftrightarrow
.El
.Ss Input
Three types of input syntax are supported: prefix, infix and postfix. Only the ASCII form of connectives is recognized. With binary operations in infix, parentheses are required so e.g. 'A+—B' is not a valid formula, but '(A+—B)' is. White space is silently ignored, except newlines, which mark the end of a single formula.
.Ss Output
Three types of input syntax are supported: prefix, infix and postfix. The connectives can be output as ASCII, words, or TeX, as described in the table above. The ASCII output can be piped back into pl as input.
.Ss Options
The options are as follows.
.Bl -tag -width Fl
.It Fl A
Check whether each formula is a Hilbert axiom.
.It Fl D
Simplify the proof by ommitting redundant axioms and proofs.
.It Fl e
Allow printing an output. The
.Nm
utility does not print either standard or error output by default.
.It Fl f Ar file
Read formulas from the specified file instead of standard input.
.It Fl i Ar syntax
Expect specified input syntax. Can be 'infix', 'prefix' or 'postfix'. By default, 'infix' is expected.
.It Fl l Ar language
Use specified output language. Can be 'ascii', 'words' or 'tex'. By default, 'ascii' is used.
.It Fl o Ar syntax
Use specified output syntax. Can be 'infix', 'prefix' or 'postfix'. By default, 'infix' is used.
.It Fl P
Check whether a sequence of formulas is a valid Hilbert proof.
.It Fl s
Terminates the execution immediately after an error occurs. This strict behaviour is obvious and enabled automatically when using either
.Fl P
or
.Fl D
option.
.El
.Sh EXIT STATUS
.Bl -tag -width Fl
.It 0
.Bl -item
.It
Valid formula syntax.
.It
Each formula is an axiom (
.Fl A
).
.It
Valid Hilbert proof (
.Fl P
).
.It
Proof was simplified (
.Fl D
).
.El
.It 1
.Bl -item
.It
Invalid formula syntax.
.It
Non-axiom found (
.Fl A
).
.It
Invalid Hilbert proof (
.Fl P
|
.Fl D
).
.It
Proof cannot be simplified more (
.Fl D
).
.El
.El
.Sh EXAMPLES
.Bl -tag -width Fl
.It Outputs \(dq-+AB\(dq
echo \(dq-(A+B)\(dq | pl -e -o prefix
.It Outputs \(dqType 2 axiom.\(dq
echo \(dq((A>(B>C))>((A>B)>(A>C)))\(dq | pl -e -A
.El
.Sh HISTORY
Written for academic purposes in 2014.
.Sh AUTHORS
Written by
.An Jan Švajcr Mt svajcjan@fit.cvut.cz
