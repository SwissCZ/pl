.Dd May 10, 2014
.Dt PL 1
.Os Ubuntu 14.04
.Sh NAME
.Nm pl
.Nd handle formulas of propositional logic
.Sh SYNOPSIS
.Nm
.Op Fl A | D | P
.Op Fl e
.Op Fl f Ar file
.Op Fl i Ar syntax
.Op Fl l Ar language
.Op Fl o Ar syntax
.Op Fl s
.Sh DESCRIPTION
The
.Nm
utility implements some rudimentary algorithms of propositional logic.
By default, it parses the standard input as propositional formulas,
reports syntax errors, and exits.
Other actions, such as proof or axiom validation,
can be specified using the options.
.Ss Language
The latin capitals A-Z are considered atomic propositions.
This means we are reducing the possible complexity of formulas
to 26 propositional variables, which is enough for our purposes.
.Pp
The following table describes how the propositional connectives
are expressed in ASCII, words, and TeX output.
.Bl -column "Connective" "ASCII" "words" "TeX"
.It Em "Connective	ASCII	Words	TeX"
.It Li negation Ta - Ta not Ta \eneg
.It Li conjunction Ta . Ta and Ta \ewedge
.It Li disjunction Ta + Ta or Ta \evee
.It Li implication Ta > Ta implies Ta \eRightarrow
.It Li biconditional Ta = Ta iff Ta \eLeftrightarrow
.El
.Ss Input
Three types of input syntax are supported: prefix, infix and postfix.
Only the ASCII form of connectives is recognized.
With binary operations in infix, parentheses are required so e.g.
.Dq A+B
is not a valid formula, but
.Dq (A+B)
is. White space is silently ignored, except newlines,
which always mark the end of a formula.
.Ss Output
Three types of input syntax are supported: prefix, infix and postfix.
The connectives can be output as ASCII, words, or TeX,
as described in the table above.
The ASCII output can be piped back into
.Nm
as input.
.Ss Options
The options are as follows.
.Bl -tag -width Fl
.It Fl A
Check whether each formula is a Hilbert axiom.
.It Fl D
Simplify the proof by ommitting redundant axioms and sub-proofs.
.It Fl e
Echo the input. The
.Nm
utility does not print any output by default.
.It Fl f Ar file
Read formulas from
.Ar file
instead of standard input.
.It Fl i Ar syntax
Expect the specified input syntax, which can be one of
.Cm infix ,
.Cm prefix
or
.Cm postfix .
By default, infix is expected.
.It Fl l Ar language
Use specified output language, which can be one of
.Cm ascii ,
.Cm words
or
.Cm tex .
By default, ascii is used.
.It Fl o Ar syntax
Use specified output syntax, which can be one of
.Cm infix ,
.Cm prefix
or
.Cm postfix .
By default, infix is used.
.It Fl P
Check whether a sequence of formulas is a valid Hilbert proof. Implies the
.Fl s
option.
.It Fl s
Be strict and terminate immediately if an error occurs.
Obviously, this behavior is implied with the
.Fl P
or
.Fl D
option.
.El
.Sh EXIT STATUS
.Bl -tag -width Fl
.It 0
.Bl -item
.It
Valid formula syntax.
.It
Each formula is an axiom
.Pq Fl A .
.It
Valid Hilbert proof
.Pq Fl P .
.It
Proof got simplified
.Pq Fl D .
.El
.It 1
.Bl -item
.It
Invalid formula syntax.
.It
Non-axiom found
.Pq Fl A .
.It
Invalid Hilbert proof
.Po
.Fl P
or
.Fl D
.Pc
.It
No duplicities in proof to be removed
.Pq Fl D .
.El
.El
.Sh EXAMPLES
Print an infix formula in prefix:
.Dl echo '-(A+B)' | pl -e -o prefix
.Pp
Recognize an axiom:
.Dl echo '((A>(B>C))>((A>B)>(A>C)))' | pl -e -A
.Sh HISTORY
Written for academic purposes in 2014.
.Sh AUTHORS
Written by
.An Jan Svajcr Aq Mt svajcjan@fit.cvut.cz
