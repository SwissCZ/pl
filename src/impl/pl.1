.Dd June 18, 2014
.Dt PL 1
.Os
.Sh NAME
.Nm pl
.Nd handle formulas of propositional logic
.Sh SYNOPSIS
.Nm
.Op Fl A | O | P
.Op Fl e
.Op Fl f Ar file
.Op Fl i Ar syntax
.Op Fl l Ar language
.Op Fl o Ar syntax
.Op Fl s
.Sh DESCRIPTION
The
.Nm
utility implements some rudimentary algorithms of propositional logic.
By default, it parses the standard input as propositional formulas,
prints them in required syntax and exits.
Other actions can be specified using the options.
.Ss Language
The Latin capitals A-Z are considered atomic propositions.
This means we are reducing the possible complexity of formulas
to 26 propositional variables, which is enough for our purposes.
.Pp
The following table describes how the propositional connectives are expressed
as ASCII, words, and TeX.
.Bl -column "biconditional" "ASCII" "Words" "TeX"
.It Em Connective Ta Em ASCII Ta Em words Ta Em TeX
.It Li negation Ta - Ta not Ta \eneg
.It Li conjunction Ta . Ta and Ta \ewedge
.It Li disjunction Ta + Ta or Ta \evee
.It Li implication Ta > Ta implies Ta \eRightarrow
.It Li biconditional Ta = Ta iff Ta \eLeftrightarrow
.El
.Ss Input
Three types of input syntax are supported: prefix, infix and postfix.
Only the ASCII form of input connectives is recognized.
With binary operations in infix, parentheses are required so e.g. 'A+B'
is not a valid formula, but '(A+B)' is. White space is silently ignored,
except newlines, which always mark the end of a formula.
.Ss Output
Three types of output syntax are supported: prefix, infix and postfix.
The connectives can be output as ASCII, words, or TeX,
as described in the table above. Naturally,
the ASCII output can be piped back into
.Nm
as input.
.Ss Options
The options are as follows:
.Bl -tag -width Fl
.It Fl A
Verify whether each formula is a valid Hilbert axiom.
.It Fl e
Echo the standard and the error output. The
.Nm
utility does not produce any output by default.
.It Fl f Ar file
Read the input from the
.Ar file
instead of the standard input.
.It Fl i Ar syntax
Expect specified input
.Ar syntax ,
which can be one of
.Cm infix ,
.Cm prefix
or
.Cm postfix .
By default,
.Cm infix
is expected.
.It Fl l Ar language
Use specified output
.Ar language ,
which can be one of
.Cm ascii ,
.Cm words
or
.Cm tex .
By default,
.Cm ascii
is used.
.It Fl o Ar syntax
Use specified output
.Ar syntax ,
which can be one of
.Cm infix ,
.Cm prefix
or
.Cm postfix .
By default,
.Cm infix
is used.
.It Fl O Ar theory
Optimize the proof by omitting redundant axioms, premises and sub-proofs. The
.Ar theory
value indicates the number of theory elements preceding
the beginning of the proof in the input. Implies the
.Fl s
option.
.It Fl P Ar theory
Verify whether a sequence of formulas is a valid Hilbert proof. Implies the
.Fl s
option. The
.Ar theory
value indicates the number of theory elements preceding
the beginning of the proof in the input. Implies the
.Fl s
option.
.It Fl s
Be strict and terminate immediately if an error occurs.
.El
.Sh EXIT STATUS
Program exit values can have following meanings:
.Bl -tag -width Fl
.It 0
.Bl -item
.It
All formulas are valid.
.It
All formulas are axioms
.Pq Fl A .
.It
Proof got simplified
.Pq Fl O .
.It
Sequence of formulas is a valid proof
.Po
.Fl O
or
.Fl P
.Pc .
.El
.It 1
.Bl -item
.It
At least one formula is invalid.
.It
At least one formula is not an axiom
.Pq Fl A .
.It
Proof could not be optimized as it was already optimal
.Pq Fl O .
.It
Sequence of formulas is not a valid proof
.Po
.Fl O
or
.Fl P
.Pc .
.El
.El
.Sh EXAMPLES
.Bl -tag -width Fl
.It Print an infix formula in prefix:
echo '-(A+B)' | pl -e -o prefix
.It Recognize a Hilbert axiom of type 2:
echo '((A>(B>C))>((A>B)>(A>C)))' | pl -e -A
.El
.Sh HISTORY
Written for academic purposes in 2014.
.Sh AUTHORS
Written by
.An Jan Svajcr Aq Mt svajcjan@fit.cvut.cz .
